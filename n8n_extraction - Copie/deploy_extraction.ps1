# Script PowerShell d'extraction des int√©grations n8n
# Avec monitoring en temps r√©el et gestion avanc√©e

param(
    [string]$OutputDir = "C:\Users\Administrateur\Desktop\jimmy gay\Projet Windsurf\extract-docn8n\n8n_extraction - Copie\output",
    [int]$Workers = 6,
    [string]$Batch = "",
    [switch]$SkipExisting = $true
)

# Configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Couleurs
$Colors = @{
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
}

function Write-ColorText {
    param([string]$Text, [string]$Color = "White")
    Write-Host $Text -ForegroundColor $Colors[$Color]
}

function Test-Prerequisites {
    Write-ColorText "=== V√âRIFICATION DES PR√âREQUIS ===" "Header"
    
    # V√©rifier Python
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ Python trouv√©: $pythonVersion" "Success"
        } else {
            throw "Python introuvable"
        }
    } catch {
        Write-ColorText "‚ùå Python n'est pas install√© ou pas dans le PATH" "Error"
        Write-ColorText "Veuillez installer Python 3.8+ depuis https://python.org" "Warning"
        exit 1
    }
    
    # V√©rifier les fichiers requis
    $requiredFiles = @("integrations_urls.csv", "integrations_scraper.py", "requirements.txt")
    foreach ($file in $requiredFiles) {
        if (Test-Path $file) {
            Write-ColorText "‚úÖ Fichier trouv√©: $file" "Success"
        } else {
            Write-ColorText "‚ùå Fichier manquant: $file" "Error"
            exit 1
        }
    }
    
    # V√©rifier le dossier de destination
    if (!(Test-Path $OutputDir)) {
        Write-ColorText "üìÅ Cr√©ation du dossier de destination: $OutputDir" "Info"
        New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
    }
    
    Write-ColorText "‚úÖ Tous les pr√©requis sont satisfaits" "Success"
}

function Install-Dependencies {
    Write-ColorText "=== INSTALLATION DES D√âPENDANCES ===" "Header"
    
    try {
        pip install -r requirements.txt
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ D√©pendances install√©es avec succ√®s" "Success"
        } else {
            throw "Installation √©chou√©e"
        }
    } catch {
        Write-ColorText "‚ùå Erreur lors de l'installation des d√©pendances" "Error"
        exit 1
    }
}

function Get-ExistingFiles {
    $integrationsDir = Join-Path $OutputDir "integrations"
    if (Test-Path $integrationsDir) {
        $existingFiles = Get-ChildItem -Path $integrationsDir -Filter "*.txt" -Recurse
        return $existingFiles.Count
    }
    return 0
}

function Show-ExtractionPlan {
    Write-ColorText "=== PLAN D'EXTRACTION ===" "Header"
    
    $existingCount = Get-ExistingFiles
    
    Write-ColorText "üìä URLs totales √† traiter: 832" "Info"
    Write-ColorText "üìÅ Destination: $OutputDir" "Info"
    Write-ColorText "‚öôÔ∏è Workers: $Workers" "Info"
    Write-ColorText "üîÑ Ignorer fichiers existants: $SkipExisting" "Info"
    
    if ($existingCount -gt 0) {
        Write-ColorText "üìã Fichiers existants trouv√©s: $existingCount" "Warning"
        Write-ColorText "   Ces fichiers seront ignor√©s pour √©viter les doublons" "Warning"
    }
    
    if ($Batch) {
        Write-ColorText "üì¶ Lot sp√©cifique: $Batch" "Info"
    } else {
        Write-ColorText "üì¶ Traitement: Tous les lots" "Info"
    }
    
    Write-ColorText "‚è±Ô∏è Temps estim√©: 4-5 heures" "Info"
}

function Start-RealTimeMonitoring {
    $integrationsDir = Join-Path $OutputDir "integrations"
    
    # Fonction de monitoring en arri√®re-plan
    $monitoringScript = {
        param($integrationsDir)
        
        $initialCount = 0
        if (Test-Path $integrationsDir) {
            $initialCount = (Get-ChildItem -Path $integrationsDir -Filter "*.txt" -Recurse).Count
        }
        
        while ($true) {
            Start-Sleep -Seconds 30
            
            if (Test-Path $integrationsDir) {
                $currentCount = (Get-ChildItem -Path $integrationsDir -Filter "*.txt" -Recurse).Count
                $progress = [math]::Round(($currentCount / 832) * 100, 1)
                
                Write-Host "`r[$(Get-Date -Format 'HH:mm:ss')] üìà Fichiers: $currentCount/832 ($progress%)" -NoNewline -ForegroundColor Cyan
                
                if ($currentCount -eq 832) {
                    Write-Host "`n‚úÖ Extraction termin√©e!" -ForegroundColor Green
                    break
                }
            }
        }
    }
    
    # D√©marrer le monitoring en arri√®re-plan
    Start-Job -ScriptBlock $monitoringScript -ArgumentList $integrationsDir | Out-Null
}

function Start-Extraction {
    Write-ColorText "=== D√âBUT DE L'EXTRACTION ===" "Header"
    
    # Construire les arguments
    $arguments = @(
        "integrations_scraper.py",
        "--csv", "integrations_urls.csv",
        "--output", "`"$OutputDir`"",
        "--workers", $Workers
    )
    
    if ($Batch) {
        $arguments += "--batch", $Batch
    }
    
    if ($SkipExisting) {
        $arguments += "--skip-existing"
    }
    
    Write-ColorText "üöÄ Lancement de l'extraction..." "Info"
    Write-ColorText "‚è∞ D√©but: $(Get-Date -Format 'HH:mm:ss')" "Info"
    
    # D√©marrer le monitoring
    Start-RealTimeMonitoring
    
    # Lancer l'extraction
    try {
        $process = Start-Process -FilePath "python" -ArgumentList $arguments -Wait -PassThru -NoNewWindow
        
        if ($process.ExitCode -eq 0) {
            Write-ColorText "`n‚úÖ EXTRACTION TERMIN√âE AVEC SUCC√àS" "Success"
        } else {
            Write-ColorText "`n‚ùå EXTRACTION √âCHOU√âE" "Error"
            Write-ColorText "V√©rifiez les logs dans: integrations_extraction.log" "Warning"
        }
    } catch {
        Write-ColorText "‚ùå Erreur lors du lancement de l'extraction: $($_.Exception.Message)" "Error"
        exit 1
    }
    
    # Arr√™ter les t√¢ches de monitoring
    Get-Job | Stop-Job
    Get-Job | Remove-Job
}

function Show-FinalResults {
    Write-ColorText "=== R√âSULTATS FINAUX ===" "Header"
    
    $integrationsDir = Join-Path $OutputDir "integrations"
    $finalCount = Get-ExistingFiles
    
    Write-ColorText "üìä Fichiers g√©n√©r√©s: $finalCount" "Info"
    Write-ColorText "üèÅ Fin: $(Get-Date -Format 'HH:mm:ss')" "Info"
    
    # V√©rifier les logs
    if (Test-Path "integrations_extraction.log") {
        Write-ColorText "üìã Logs disponibles: integrations_extraction.log" "Info"
    }
    
    # V√©rifier les statistiques
    $statsFile = Join-Path $OutputDir "extraction_stats.txt"
    if (Test-Path $statsFile) {
        Write-ColorText "üìà Statistiques: $statsFile" "Info"
    }
    
    # Calculer le taux de succ√®s
    $successRate = [math]::Round(($finalCount / 832) * 100, 1)
    
    if ($successRate -gt 95) {
        Write-ColorText "üéâ Taux de succ√®s: $successRate% - Excellent!" "Success"
    } elseif ($successRate -gt 80) {
        Write-ColorText "‚úÖ Taux de succ√®s: $successRate% - Tr√®s bon" "Success"
    } else {
        Write-ColorText "‚ö†Ô∏è Taux de succ√®s: $successRate% - √Ä am√©liorer" "Warning"
    }
}

function Show-QuickCommands {
    Write-ColorText "=== COMMANDES RAPIDES ===" "Header"
    
    Write-ColorText "Pour relancer l'extraction:" "Info"
    Write-ColorText "  .\deploy_extraction.ps1" "Info"
    
    Write-ColorText "Pour traiter un lot sp√©cifique:" "Info"
    Write-ColorText "  .\deploy_extraction.ps1 -Batch 'batch_01'" "Info"
    
    Write-ColorText "Pour forcer la re-extraction:" "Info"
    Write-ColorText "  .\deploy_extraction.ps1 -SkipExisting:`$false" "Info"
    
    Write-ColorText "Pour surveiller en temps r√©el:" "Info"
    Write-ColorText "  Get-ChildItem '$OutputDir\integrations' -Filter '*.txt' | Measure-Object" "Info"
}

# === EX√âCUTION PRINCIPALE ===

Write-ColorText "üöÄ EXTRACTEUR D'INT√âGRATIONS N8N" "Header"
Write-ColorText "Traitement de 832 URLs d'int√©grations" "Info"
Write-ColorText "================================================" "Header"

# √âtapes d'ex√©cution
Test-Prerequisites
Install-Dependencies
Show-ExtractionPlan

# Demander confirmation
Write-ColorText "`n‚ö†Ô∏è √ätes-vous pr√™t √† commencer l'extraction?" "Warning"
$confirmation = Read-Host "Tapez 'oui' pour continuer"

if ($confirmation -eq "oui") {
    Start-Extraction
    Show-FinalResults
    Show-QuickCommands
} else {
    Write-ColorText "‚ùå Extraction annul√©e par l'utilisateur" "Warning"
}

Write-ColorText "`nüèÅ Script termin√©" "Success"